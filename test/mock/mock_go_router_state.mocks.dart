// Mocks generated by Mockito 5.3.2 from annotations
// in testable_gorouter_with_riverpod/test/mock/mock_go_router_state.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/widgets.dart' as _i2;
import 'package:go_router/go_router.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeValueKey_0<T> extends _i1.SmartFake implements _i2.ValueKey<T> {
  _FakeValueKey_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GoRouterState].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockGoRouterState extends _i1.Mock implements _i3.GoRouterState {
  @override
  String get location => (super.noSuchMethod(
        Invocation.getter(#location),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get subloc => (super.noSuchMethod(
        Invocation.getter(#subloc),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  Map<String, String> get params => (super.noSuchMethod(
        Invocation.getter(#params),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);
  @override
  Map<String, String> get queryParams => (super.noSuchMethod(
        Invocation.getter(#queryParams),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);
  @override
  Map<String, List<String>> get queryParametersAll => (super.noSuchMethod(
        Invocation.getter(#queryParametersAll),
        returnValue: <String, List<String>>{},
        returnValueForMissingStub: <String, List<String>>{},
      ) as Map<String, List<String>>);
  @override
  _i2.ValueKey<String> get pageKey => (super.noSuchMethod(
        Invocation.getter(#pageKey),
        returnValue: _FakeValueKey_0<String>(
          this,
          Invocation.getter(#pageKey),
        ),
        returnValueForMissingStub: _FakeValueKey_0<String>(
          this,
          Invocation.getter(#pageKey),
        ),
      ) as _i2.ValueKey<String>);
  @override
  String namedLocation(
    String? name, {
    Map<String, String>? params = const {},
    Map<String, String>? queryParams = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedLocation,
          [name],
          {
            #params: params,
            #queryParams: queryParams,
          },
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
}
